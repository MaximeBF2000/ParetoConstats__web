var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { detectAnimationFromOptions } from "./utils/detect-animation-from-options";
import sync, { cancelSync } from "framesync";
import { interpolate } from "../utils/interpolate";
import { loopElapsed, reverseElapsed, hasRepeatDelayElapsed, } from "./utils/elapsed";
var framesync = function (update) {
    var passTimestamp = function (_a) {
        var delta = _a.delta;
        return update(delta);
    };
    return {
        start: function () { return sync.update(passTimestamp, true, true); },
        stop: function () { return cancelSync.update(passTimestamp); },
    };
};
export function animate(_a) {
    var from = _a.from, to = _a.to, _b = _a.autoplay, autoplay = _b === void 0 ? true : _b, _c = _a.driver, driver = _c === void 0 ? framesync : _c, _d = _a.elapsed, elapsed = _d === void 0 ? 0 : _d, _e = _a.repeat, repeatMax = _e === void 0 ? 0 : _e, _f = _a.repeatType, repeatType = _f === void 0 ? "loop" : _f, _g = _a.repeatDelay, repeatDelay = _g === void 0 ? 0 : _g, onPlay = _a.onPlay, onComplete = _a.onComplete, onRepeat = _a.onRepeat, onUpdate = _a.onUpdate, options = __rest(_a, ["from", "to", "autoplay", "driver", "elapsed", "repeat", "repeatType", "repeatDelay", "onPlay", "onComplete", "onRepeat", "onUpdate"]);
    var driverControls;
    var repeatCount = 0;
    var computedDuration = options.duration;
    var isForwardPlayback = true;
    var interpolateFromNumber;
    var Animator = detectAnimationFromOptions(options);
    if (Animator.needsInterpolation(from, to)) {
        interpolateFromNumber = interpolate([0, 100], [from, to], {
            clamp: false,
        });
        from = 0;
        to = 100;
    }
    var animation = new Animator(__assign(__assign({}, options), { from: from, to: to }));
    function repeat() {
        repeatCount++;
        if (repeatType === "reverse") {
            isForwardPlayback = repeatCount % 2 === 0;
            elapsed = reverseElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback);
        }
        else {
            elapsed = loopElapsed(elapsed, computedDuration, repeatDelay);
            if (repeatType === "mirror")
                animation.flipTarget();
        }
        animation.isComplete = false;
        onRepeat && onRepeat();
    }
    function complete() {
        driverControls.stop();
        onComplete && onComplete();
    }
    function update(delta) {
        if (!isForwardPlayback)
            delta = -delta;
        elapsed += delta;
        var latest = animation.update(Math.max(0, elapsed));
        if (interpolateFromNumber) {
            latest = interpolateFromNumber(latest);
        }
        onUpdate(latest);
        var isComplete = isForwardPlayback
            ? animation.isComplete
            : elapsed <= 0;
        if (isComplete) {
            if (repeatCount === 0 && computedDuration === undefined) {
                computedDuration = elapsed;
            }
            if (repeatCount < repeatMax) {
                hasRepeatDelayElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback) && repeat();
            }
            else {
                complete();
            }
        }
    }
    function play() {
        onPlay && onPlay();
        driverControls = driver(update);
        driverControls.start();
    }
    autoplay && play();
    return {
        play: play,
        pause: function () { },
        resume: function () { },
        reverse: function () { },
        seek: function () { },
        stop: function () { return driverControls.stop(); },
    };
}
//# sourceMappingURL=index.js.map