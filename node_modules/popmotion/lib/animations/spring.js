var SpringAnimator = (function () {
    function SpringAnimator(options) {
        this.isComplete = false;
        this.updateOptions(options);
        this.createSpring();
    }
    SpringAnimator.prototype.createSpring = function () {
        var _a = this.options, velocity = _a.velocity, from = _a.from, to = _a.to, damping = _a.damping, stiffness = _a.stiffness, mass = _a.mass;
        var initialVelocity = velocity ? -(velocity / 1000) : 0.0;
        var initialDelta = to - from;
        var dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));
        var angularFreq = Math.sqrt(stiffness / mass) / 1000;
        if (dampingRatio < 1) {
            this.resolveSpring = function (t) {
                var envelope = Math.exp(-dampingRatio * angularFreq * t);
                var expoDecay = angularFreq * Math.sqrt(1.0 - dampingRatio * dampingRatio);
                return (to -
                    envelope *
                        (((initialVelocity +
                            dampingRatio * angularFreq * initialDelta) /
                            expoDecay) *
                            Math.sin(expoDecay * t) +
                            initialDelta * Math.cos(expoDecay * t)));
            };
        }
        else if (dampingRatio === 1) {
            this.resolveSpring = function (t) {
                var envelope = Math.exp(-angularFreq * t);
                return to - envelope * (1 + angularFreq * t);
            };
        }
        else {
            var dampedAngularFreq_1 = angularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);
            this.resolveSpring = function (t) {
                var envelope = Math.exp(-dampingRatio * angularFreq * t);
                return (to -
                    (envelope *
                        ((initialVelocity +
                            dampingRatio * angularFreq * initialDelta) *
                            Math.sinh(dampedAngularFreq_1 * t) +
                            dampedAngularFreq_1 *
                                initialDelta *
                                Math.cosh(dampedAngularFreq_1 * t))) /
                        dampedAngularFreq_1);
            };
        }
    };
    SpringAnimator.prototype.update = function (t) {
        var latest = this.resolveSpring(t);
        var _a = this.options, velocity = _a.velocity, restSpeed = _a.restSpeed, restDelta = _a.restDelta, to = _a.to;
        var isBelowVelocityThreshold = Math.abs(velocity) <= restSpeed;
        var isBelowDisplacementThreshold = Math.abs(to - latest) <= restDelta;
        this.isComplete =
            isBelowVelocityThreshold && isBelowDisplacementThreshold;
        return this.isComplete ? to : latest;
    };
    SpringAnimator.prototype.updateOptions = function (_a) {
        var _b = _a.from, from = _b === void 0 ? 0.0 : _b, _c = _a.to, to = _c === void 0 ? 0.0 : _c, _d = _a.velocity, velocity = _d === void 0 ? 0.0 : _d, _e = _a.stiffness, stiffness = _e === void 0 ? 100 : _e, _f = _a.damping, damping = _f === void 0 ? 10 : _f, _g = _a.mass, mass = _g === void 0 ? 1.0 : _g, _h = _a.restSpeed, restSpeed = _h === void 0 ? 0.005 : _h, _j = _a.restDelta, restDelta = _j === void 0 ? 0.5 : _j;
        this.options = {
            from: from,
            to: to,
            velocity: velocity,
            stiffness: stiffness,
            damping: damping,
            mass: mass,
            restSpeed: restSpeed,
            restDelta: restDelta,
        };
    };
    SpringAnimator.prototype.flipTarget = function () {
        var _a = this.options, from = _a.from, to = _a.to, velocity = _a.velocity;
        this.options.velocity = -velocity;
        this.options.from = to;
        this.options.to = from;
        this.createSpring();
    };
    SpringAnimator.needsInterpolation = function (from, to) {
        return typeof from === "string" || typeof to === "string";
    };
    SpringAnimator.uniqueOptionKeys = new Set([
        "stiffness",
        "damping",
        "mass",
        "restSpeed",
        "restDelta",
    ]);
    return SpringAnimator;
}());
export { SpringAnimator };
//# sourceMappingURL=spring.js.map